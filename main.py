import telebot
from telebot import types
from dotenv import load_dotenv
from loguru import logger
from os import getenv
import utility as util
from datetime import datetime
import random
import steam

load_dotenv(override=True)


def get_Datetime():
    now = datetime.now()
    pretty_str = now.strftime("%d.%m.%Y_%H.%M.%S")
    return pretty_str


    # create logger
logger.add(f"logs/{get_Datetime()}.log", rotation='1 day',
           level="DEBUG", compression='zip')

# create a bot
bot = telebot.TeleBot(getenv('TOKEN'))

bot.set_my_commands(
    commands=[types.BotCommand(command='/help', description='show help message'),
              types.BotCommand(
                  command='/dice', description='roll a 1 to 6 dice'),
              types.BotCommand(
                  command='/roll', description='roll random 1 to 100 number'),
              types.BotCommand(command='/keyboard',
                               description='update fast answer keyboard'),
              types.BotCommand(command='/status',
                               description='show Steam servers status'),
              types.BotCommand(command='/bomber',
                               description="admin's little secretüòà"),
              types.BotCommand(command='/admins', description="show list of admins"), ])


def create_ping_msg(message):
    ping_string = str()
    users = util.load_yaml(f'data/chat_users/{message.chat.id}.yaml')
    for user in users:
        ping_string += f'@{user} '

    pretty_adder = ('–ì–æ –∫–∞—Ç–æ—á–∫—É, —Å–ª–∞–¥–∫–∏–µ –º–æ–∏ <3 ü§çüñ§', '–ó–∞–µ–±–∞–ª–∏, –ø–æ—à–ª–∏ –≤ –¥–æ—Ç—Éüç∫',
                    '–≠–≠–≠ –æ–π–±–æ–πüôàüôâüôä', '–•–æ—á—É —Å–æ—Å–∞—Ç—å, –ø–æ—à–ª–∏ —Å–æ—Å–∞–∞–∞–∞–∞—Ç—åüë∫', '–ü–æ—à–ª–∏ –≤ –¥–æ—Ç—Éüòà', '–ú–æ–∂–µ—Ç –≤ –∂–æ–ø—É?üëâüèΩüí¶')
    ping_string = f'\n{random.choice(pretty_adder)}\n{ping_string}'
    logger.info(
        f'ping string: {ping_string} created\n chat id: {message.chat.id}\n')
    return ping_string


@bot.message_handler(commands=["start"])
def start(message, res=False):
    bot.send_message(
        message.chat.id, '–°–æ–∑–¥–∞–π—Ç–µ —á–∞—Ç –∏ –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –Ω–µ–≥–æ, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–µ—Ö –≤ –Ω–µ–≥–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!')


@bot.message_handler(commands=["admins"])
def send_list_of_admins(message):
    admins = list(
        admin.user.username for admin in bot.get_chat_administrators(message.chat.id))
    admins_string = '\n@'.join(admins)
    bot.send_message(
        message.chat.id, f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n{admins_string}')


@bot.message_handler(commands=["bomber"])
def bomber(message):
    if message.from_user.username in tuple(admin.user.username for admin in bot.get_chat_administrators(message.chat.id)):
        for _ in range(5):
            ping_string = create_ping_msg(message)
            answer = bot.send_message(
                chat_id=message.chat.id, text=ping_string)
            util.create_timer_thread(message, answer, bot)

    else:
        answer = bot.send_message(
            chat_id=message.chat.id, text='–∏—Ö–∏—Ö–∏—Ö–∏—Ö—Ö–∏\n–ê–¥–º–∏–Ω–∫–∏ —Ç–æ –Ω–µ—Çüò¢')
        util.create_timer_thread(message, answer, bot)


@bot.message_handler(commands=["status"])
def send_steam_status(message):
    loading = bot.send_message(
        chat_id=message.chat.id, text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...')
    answer = bot.send_message(chat_id=message.chat.id,
                              text=steam.call_csgo_api())
    bot.delete_message(chat_id=message.chat.id, message_id=loading.message_id)
    util.create_timer_thread(message, answer, bot)


@bot.message_handler(commands=["dice"])
def dice(message):
    util.create_timer_thread(message, bot.send_dice(message.chat.id), bot)


@bot.message_handler(commands=["roll"])
def roll(message):
    util.create_timer_thread(message, bot.send_message(
        chat_id=message.chat.id, text=f'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {random.randint(1, 100)}'), bot)


@bot.message_handler(commands=["keyboard"])
def show_keyboard(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = (types.KeyboardButton('?'),
               types.KeyboardButton('/roll'),
               )
    for button in buttons:
        markup.add(button)
    bot.send_message(
        message.chat.id, text='‚å®Ô∏è', reply_markup=markup)


@bot.message_handler(commands=["help"])
def show_help(message):
    help_msg = "/dice - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\n/roll - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n/keyboard - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É c –±—ã—Å—Ç—Ä—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ steam\n/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\ntry <–¥–µ–π—Å—Ç–≤–∏–µ> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—Ö –¥–µ–π—Å—Ç–≤–∏—è\n\nmade by @pheezz"
    util.create_timer_thread(message, bot.send_message(
        message.chat.id, help_msg), bot)


@bot.message_handler(content_types=["new_chat_members"])
def add_user_in_yaml(message):
    new_user = message.new_chat_members[0]
    chat_id = message.chat.id

    try:
        util.load_yaml(f'data/chat_users/{chat_id}.yaml')
    except FileNotFoundError:
        util.dump_yaml(f'data/chat_users/{chat_id}.yaml', {'chat id': chat_id})
    finally:
        data = util.load_yaml(f'data/chat_users/{chat_id}.yaml')
        if 'chat_id' in data:
            del data['chat_id']
        if new_user.username not in data:
            data.update({new_user.username: new_user.id})
        util.dump_yaml(f'data/chat_users/{chat_id}.yaml', data)


@bot.message_handler(content_types=["left_chat_member"])
def delete_user_from_yaml(message):
    left_user = message.left_chat_member
    chat_id = message.chat.id
    data = util.load_yaml(f'data/chat_users/{chat_id}.yaml')

    try:
        del data[left_user.username]
        logger.warning(f'no key in yaml as {left_user.username}')
    except:
        del data[left_user.first_name]
        logger.warning(f'no key in yaml as {left_user.first_name}')
    finally:
        util.dump_yaml(f'data/chat_users/{chat_id}.yaml', data)


@bot.message_handler(content_types=["text"])
def pinger_answer(message):
    if message.text == '?':
        ping_string = create_ping_msg(message)
        answer = bot.send_message(
            chat_id=message.chat.id, text=ping_string)
        util.create_timer_thread(message, answer, bot)

    elif message.text.lower().startswith('try'):
        result = ('–£–°–ü–ï–®–ù–û', '–ù–ï–£–î–ê–ß–ù–û')
        try_string = message.text.lower().replace('try', '')
        util.create_timer_thread(message, bot.send_message(
            chat_id=message.chat.id, text=f'{try_string}: *{random.choice(result)}*', parse_mode='Markdown'), bot)


@logger.catch
def start_bot():  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.polling(none_stop=True, interval=0)


start_bot()
