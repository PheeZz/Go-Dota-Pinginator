from itertools import count
from unittest import result
import requests as rq
from dotenv import load_dotenv
from os import getenv, mkdir, listdir
from loguru import logger
import yaml
import json
from random import randint
from telebot import types

load_dotenv(override=True)


def call_csgo_api():
    req = rq.get(
        f'https://api.steampowered.com/ICSGOServers_730/GetGameServersStatus/v1/?key={getenv("STEAM_API_KEY")}').json()  # get info about servers by steam-web-api

    datacenters = req.get('result').get('datacenters')
    services = req.get('result').get('services')

    interesting_datacenters = ('EU East', 'EU West', 'EU North', 'Poland')
    info_interesting_datacenters = {datacenter: datacenters.get(  # sort info about interesting datacenters (location of each server)
        datacenter) for datacenter in interesting_datacenters}

    answer_string = '*–ò–≥—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä–∞*\n'
    for server in info_interesting_datacenters:
        if info_interesting_datacenters.get(server).get('capacity') == 'full':
            answer_string += f'{server}: üü¢Online\n'
        else:
            answer_string += f'{server}: ‚ùåOffline\n'

    answer_string += '\n*–°–µ—Ä–≤–∏—Å—ã Steam*\n'

    if services.get('SessionsLogon') == 'normal':
        answer_string += '–°–∏—Å—Ç–µ–º–∞ –≤—Ö–æ–¥–∞: üü¢Online\n'
    else:
        answer_string += '–°–∏—Å—Ç–µ–º–∞ –≤—Ö–æ–¥–∞: ‚ùåOffline\n'

    if services.get('SteamCommunity') == 'normal':
        answer_string += '–°–æ–æ–±—â–µ—Å—Ç–≤–æ Steam: üü¢Online\n'
    else:
        answer_string += '–°–æ–æ–±—â–µ—Å—Ç–≤–æ Steam: ‚ùåOffline\n'

    return answer_string


def register_role_priority(message):
    '''
    —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–¥–∞—é—â–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é) —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–æ–ª–ª–∞
    '''
    only_digits = ''.join(filter(str.isdigit, message.text))
    if len(set(only_digits)) < 5:  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Ö–∏—Ç—Ä–æ–∂–æ–ø—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        digits = set(only_digits)
        only_digits = ''.join(digits)
        while len(only_digits) < 5:
            only_digits += '5'

    user_roles = {message.from_user.username: only_digits}

    try:
        with open(f'data/role_priority/{message.chat.id}.yaml', 'r') as stream:
            role_priority = yaml.full_load(stream)
    except FileNotFoundError:
        role_priority = dict()
        logger.error(f'File {message.chat.id} for roles priority not found')
    role_priority.update(user_roles)

    yaml.dump(user_roles, open(
        f'data/role_priority/{message.chat.id}.yaml', 'w'))
    logger.info(f'{message.from_user.username} registered role priority {only_digits} for chat {message.chat.id} in file: data/role_priority/{message.chat.id}.yaml')


def get_user_priority(message) -> str | None:
    try:
        with open(f'data/role_priority/{message.chat.id}.yaml', 'r') as stream:
            roles_priority_dict = yaml.full_load(stream)
        user_roles = roles_priority_dict.get(message.from_user.username)
        return user_roles
    except FileNotFoundError:
        return None


def show_my_priority(message, bot):
    user_roles = get_user_priority(message)
    if user_roles is None:
        bot.send_message(chat_id=message.chat.id,
                         text='–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setpriority –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    else:
        bot.send_message(chat_id=message.chat.id,
                         text=f'{message.from_user.first_name}, –≤–∞—à–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å —Ä–æ–ª–µ–π:\n{user_roles}')


def show_all_priority(message, bot):
    '''
    –≤—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ —á–∞—Ç–∞ /data/role_priority/{message.chat.id}.yaml
    '''
    try:
        with open(f'data/role_priority/{message.chat.id}.yaml', 'r') as stream:
            roles_priority_dict = yaml.full_load(stream)
        roles_priority_string = json.dumps(roles_priority_dict)

        chars_for_delete = ('{', '}', '"')
        for char in chars_for_delete:
            roles_priority_string = roles_priority_string.replace(
                char, '')

        bot.send_message(chat_id=message.chat.id,
                         text=f'–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–æ–ª–µ–π:\n{roles_priority_string}')
    except FileNotFoundError:
        bot.send_message(chat_id=message.chat.id,
                         text='–ï—â–µ –Ω–∏–∫—Ç–æ –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setpriority –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')


def create_lobby(message, bot):
    '''
    —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –∏–∑ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–ª–ª–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º
    –µ—Å–ª–∏ –ª–æ–±–±–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –æ–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
    '''
    try:
        # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —á–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ª–æ–±–±–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
        mkdir(f'data/lobby/{message.chat.id}')
        logger.info(f'–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –ª–æ–±–±–∏ –¥–ª—è —á–∞—Ç–∞ {message.chat.id}')
    except FileExistsError:
        logger.warning(f'–ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {message.chat.id}')

    user_roles = get_user_priority(message)
    user_and_roles = {message.from_user.username: user_roles}

    if user_roles is None:
        logger.error(
            f'{message.from_user.username} not registered in role priority')
        answer = bot.send_message(chat_id=message.chat.id,
                                  text='–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setpriority –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        return answer

    try:
        with open(f'data/lobby/{message.chat.id}/{message.text}.yaml', 'w') as stream:
            logger.info(f'Lobby {message.text} created')
            yaml.dump(user_and_roles, stream)
        answer = bot.send_message(
            chat_id=message.chat.id, text=f'–õ–æ–±–±–∏ {message.text} —Å–æ–∑–¥–∞–Ω–æ')
        return answer
    except:
        logger.error(f'Lobby {message.text} not created')
        answer = bot.send_message(chat_id=message.chat.id,
                                  text='–õ–æ–±–±–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ\n–ü–æ—á–µ–º—É? –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ —Ö–∏–∏—Ö–∏—Ö–∏—Ö–∏—Ö–∏—Ö–∏—Ö–∏–∏—Ö–∏—Ö')
        return answer


def users_lobbies(message) -> list:
    '''
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–±–±–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    '''
    lobby_list = listdir(f'data/lobby/{message.chat.id}')
    users_lobby_list = list()

    for lobby in lobby_list:
        with open(f'data/lobby/{message.chat.id}/{lobby}', 'r') as stream:
            lobby_dict = yaml.full_load(stream)
            if message.from_user.username in lobby_dict.keys():
                users_lobby_list.append(lobby)

    users_lobby_list = [lobby.replace('.yaml', '')
                        for lobby in users_lobby_list]

    return users_lobby_list


def roll_roles(message, bot):
    '''
    –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–æ–ª–µ–π –∏–∑ –ª–æ–±–±–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
    '''

    try:
        with open(f'data/lobby/{message.chat.id}/{message.text}.yaml', 'r') as stream:
            users_roles = yaml.full_load(stream)
    except FileNotFoundError:
        logger.error(f'Lobby {message.text} not found')
        answer = bot.send_message(chat_id=message.chat.id,
                                  text='–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return answer

    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è /roll –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç 1 –¥–æ 100
    roll_result = {user: randint(1, 100) for user in users_roles.keys()}
    logger.info(f'Roll result: {roll_result}')
    roll_result_numbers = sorted(
        roll_result.items(), key=lambda x: x[1], reverse=True)
    roll_result = sorted(roll_result, key=roll_result.get, reverse=True)

    result_dict = dict()
    for user in roll_result:  # –ø–µ—Ä–µ–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        result_dict.update({user: users_roles[user][0]})
        current_pos = users_roles[user][0]
        del users_roles[user]
        for check in users_roles:
            # —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if current_pos in users_roles[check]:
                users_roles.update(
                    {check: users_roles[check].replace(current_pos, '')+'5'})

    pretty_str = '*–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï*\n'
    counter = 0
    for user in result_dict:
        pretty_str += f'{result_dict[user]}pos - {user} - roll: *{roll_result_numbers[counter][1]}*\n'
        counter += 1
    del counter
    logger.info(f'Roles fill result: {pretty_str}')

    bot.send_message(chat_id=message.chat.id,
                     text=pretty_str, parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())


if __name__ == '__main__':
    pass
